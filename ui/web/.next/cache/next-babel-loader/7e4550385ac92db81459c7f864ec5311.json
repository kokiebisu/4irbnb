{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\n/**\n * A custom hook which allows modals to close when clicked outside of itself\n * @param ref\n * @param handler\n */\n\nexport var useOnClickOutside = function useOnClickOutside(ref, handler) {\n  _s();\n\n  useEffect(function () {\n    var listener = function listener(event) {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return function () {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default useOnClickOutside;","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/hooks/useOnClickOutside.ts"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAAA;;AACjDH,EAAAA,SAAS,CACP,YAAM;AACJ,QAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B;AACA,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACD;;AAEDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KAPD;;AASAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;AAEA,WAAO,YAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;AACD,KAHD;AAID,GAlBM,EAmBP;AACA;AACA;AACA;AACA;AACA;AACA,GAACF,GAAD,EAAMC,OAAN,CAzBO,CAAT;AA2BD,CA5BM;;GAAMF,iB;;AA8Bb,eAAeA,iBAAf","sourcesContent":["import { useEffect } from 'react';\n\n/**\n * A custom hook which allows modals to close when clicked outside of itself\n * @param ref\n * @param handler\n */\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = (event) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n};\n\nexport default useOnClickOutside;\n"]},"metadata":{},"sourceType":"module"}