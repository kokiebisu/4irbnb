{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** components */\nimport { EmailInput } from \"@input/input.email\";\nimport { PasswordInput } from \"@input/input.password\";\nimport { NameInput } from \"@input/input.name\";\nimport { BirthdateInput } from \"@input/input.birthdate\";\nimport { RegionInput } from \"@input/input.region\";\nimport { PhoneNumberInput } from \"@input/input.phone\";\nimport { PlaceInput } from \"@input/input.place\";\nimport { GuestsInput } from \"@input/input.guests\";\nimport { AddressInput } from \"@input/input.address\";\nimport { SelectInput } from \"@input/input.select\";\nimport { RadioInput } from \"@input/input.radio\";\nimport { CounterInput } from \"@input/input.counter\";\nimport { CheckboxInput } from \"@input/input.checkbox\";\nimport { TextInput } from \"@input/input.text\";\nimport { TextAreaInput } from \"@input/input.textarea\";\nimport { LimitInput } from \"@input/input.limit\";\nimport { VerifyInput } from \"@input/input.verify\";\nimport { ClosedInput } from \"@input/input.closed\";\nimport { PriceInput } from \"@input/input.price\";\nimport { PhotoInput } from \"@input/input.photo\";\n/** styles **/\n\nimport shape from \"@styles/shape.module.scss\";\nimport { AnotherInput } from \"./input.another\";\n\n/**\n * Bundles the input components\n * @param {string} variant - Specifies the variant of input component\n */\nexport const Input = (_ref) => {\n  let {\n    variant = \"text\",\n    spread\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"spread\"]);\n\n  const variants = {\n    email: /*#__PURE__*/_jsx(EmailInput, _objectSpread({}, props)),\n    password: /*#__PURE__*/_jsx(PasswordInput, _objectSpread({}, props)),\n    name: /*#__PURE__*/_jsx(NameInput, _objectSpread({}, props)),\n    birthdate: /*#__PURE__*/_jsx(BirthdateInput, _objectSpread({}, props)),\n    phone: /*#__PURE__*/_jsx(PhoneNumberInput, _objectSpread({}, props)),\n    region: /*#__PURE__*/_jsx(RegionInput, _objectSpread({}, props)),\n    place: /*#__PURE__*/_jsx(PlaceInput, _objectSpread({}, props)),\n    guests: /*#__PURE__*/_jsx(GuestsInput, _objectSpread({}, props)),\n    address: /*#__PURE__*/_jsx(AddressInput, _objectSpread({}, props)),\n    select: /*#__PURE__*/_jsx(SelectInput, _objectSpread({}, props)),\n    radio: /*#__PURE__*/_jsx(RadioInput, _objectSpread({}, props)),\n    counter: /*#__PURE__*/_jsx(CounterInput, _objectSpread({}, props)),\n    text: /*#__PURE__*/_jsx(TextInput, _objectSpread({}, props)),\n    checkbox: /*#__PURE__*/_jsx(CheckboxInput, _objectSpread({}, props)),\n    textarea: /*#__PURE__*/_jsx(TextAreaInput, _objectSpread({}, props)),\n    limit: /*#__PURE__*/_jsx(LimitInput, _objectSpread({}, props)),\n    verify: /*#__PURE__*/_jsx(VerifyInput, _objectSpread({}, props)),\n    closed: /*#__PURE__*/_jsx(ClosedInput, _objectSpread({}, props)),\n    price: /*#__PURE__*/_jsx(PriceInput, _objectSpread({}, props)),\n    photo: /*#__PURE__*/_jsx(PhotoInput, _objectSpread({}, props)),\n    another: /*#__PURE__*/_jsx(AnotherInput, _objectSpread({}, props))\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: spread && [shape[\"w--full\"]].join(\" \"),\n    \"data-testid\": `${variant}-input`,\n    children: variants[variant]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}