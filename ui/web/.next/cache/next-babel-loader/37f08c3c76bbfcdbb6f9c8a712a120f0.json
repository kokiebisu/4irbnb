{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { APIClient } from \"api/client\";\n/**\n * Fetches based on the given request method and body (optional)\n * @param {string} url - Url to send the request to\n * @param {string} method - HTTP method (GET|POST|PUT|DELETE)\n * @param {Object} body - Options you want to pass to the request\n * @param {function} triggerLoading - Callback triggered when the request is being sent. (Usage: Loading Animations)\n * @param {function} onSuccess - Callback triggered when the request is successful\n * @param {function} onFail - Callback triggered when the request is not successful\n */\n\nexport var usePost = function usePost(_ref) {\n  var url = _ref.url,\n      body = _ref.body,\n      triggerLoading = _ref.triggerLoading,\n      onSuccess = _ref.onSuccess,\n      onFail = _ref.onFail;\n\n  var doFetch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var client, _yield$client$post, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (triggerLoading) {\n                triggerLoading(true);\n              }\n\n              client = APIClient();\n              _context.next = 5;\n              return client.post(url, body);\n\n            case 5:\n              _yield$client$post = _context.sent;\n              _data = _yield$client$post.data;\n\n              if (onSuccess) {\n                onSuccess(_data);\n              }\n\n              return _context.abrupt(\"return\", {\n                data: _data\n              });\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              setTimeout(function () {\n                if (triggerLoading) {\n                  triggerLoading(false);\n                }\n\n                if (onFail) {\n                  onFail();\n                }\n              }, 2000);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function doFetch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return doFetch;\n};","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/hooks/usePost.ts"],"names":["APIClient","usePost","url","body","triggerLoading","onSuccess","onFail","doFetch","client","post","data","setTimeout"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,YAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAYjB;AAAA,MAXJC,GAWI,QAXJA,GAWI;AAAA,MAVJC,IAUI,QAVJA,IAUI;AAAA,MATJC,cASI,QATJA,cASI;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,MAOI,QAPJA,MAOI;;AACJ,MAAMC,OAAO;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEZ,kBAAIH,cAAJ,EAAoB;AAClBA,gBAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AACKI,cAAAA,MALM,GAKGR,SAAS,EALZ;AAAA;AAAA,qBAMWQ,MAAM,CAACC,IAAP,CAAYP,GAAZ,EAAiBC,IAAjB,CANX;;AAAA;AAAA;AAMJO,cAAAA,KANI,sBAMJA,IANI;;AAOZ,kBAAIL,SAAJ,EAAe;AACbA,gBAAAA,SAAS,CAACK,KAAD,CAAT;AACD;;AATW,+CAUL;AAAEA,gBAAAA,IAAI,EAAJA;AAAF,eAVK;;AAAA;AAAA;AAAA;AAYZC,cAAAA,UAAU,CAAC,YAAM;AACf,oBAAIP,cAAJ,EAAoB;AAClBA,kBAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AACD,oBAAIE,MAAJ,EAAY;AACVA,kBAAAA,MAAM;AACP;AACF,eAPS,EAOP,IAPO,CAAV;;AAZY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPC,OAAO;AAAA;AAAA;AAAA,KAAb;;AAsBA,SAAOA,OAAP;AACD,CApCM","sourcesContent":["import { APIClient } from \"api/client\";\n\n/**\n * Fetches based on the given request method and body (optional)\n * @param {string} url - Url to send the request to\n * @param {string} method - HTTP method (GET|POST|PUT|DELETE)\n * @param {Object} body - Options you want to pass to the request\n * @param {function} triggerLoading - Callback triggered when the request is being sent. (Usage: Loading Animations)\n * @param {function} onSuccess - Callback triggered when the request is successful\n * @param {function} onFail - Callback triggered when the request is not successful\n */\nexport const usePost = ({\n  url,\n  body,\n  triggerLoading,\n  onSuccess,\n  onFail,\n}: {\n  url: string;\n  body: any;\n  triggerLoading?: (state: boolean) => void;\n  onSuccess: (data?: any) => void;\n  onFail?: () => void;\n}) => {\n  const doFetch = async () => {\n    try {\n      if (triggerLoading) {\n        triggerLoading(true);\n      }\n      const client = APIClient();\n      const { data } = await client.post(url, body);\n      if (onSuccess) {\n        onSuccess(data);\n      }\n      return { data };\n    } catch (err) {\n      setTimeout(() => {\n        if (triggerLoading) {\n          triggerLoading(false);\n        }\n        if (onFail) {\n          onFail();\n        }\n      }, 2000);\n    }\n  };\n  return doFetch;\n};\n"]},"metadata":{},"sourceType":"module"}