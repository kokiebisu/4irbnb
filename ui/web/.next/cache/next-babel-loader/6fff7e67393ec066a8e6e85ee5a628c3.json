{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** homes templates */\nimport { CategoryPrototype } from \"@prototype/homes/prototype.category\";\nimport { NearbyPrototype } from \"@prototype/homes/prototype.nearby\";\nexport var Prototype = function Prototype(_ref) {\n  var _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? \"nearby\" : _ref$variant,\n      _ref$city = _ref.city,\n      city = _ref$city === void 0 ? \"City\" : _ref$city,\n      _ref$stayType = _ref.stayType,\n      stayType = _ref$stayType === void 0 ? \"house\" : _ref$stayType,\n      characteristics = _ref.characteristics,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"city\", \"stayType\", \"characteristics\"]);\n\n  var variants = {\n    nearby: /*#__PURE__*/_jsx(NearbyPrototype, _objectSpread({}, props)),\n    category: /*#__PURE__*/_jsx(CategoryPrototype, _objectSpread({}, props))\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    \"data-testid\": \"\".concat(variant, \"-template\"),\n    children: variants[variant]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}