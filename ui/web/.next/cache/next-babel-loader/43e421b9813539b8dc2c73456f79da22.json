{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ken/Desktop/airbnb/ui/web/components/atoms/input/input.text.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n/** styles **/\n\nimport shape from \"@styles/shape.module.scss\";\nimport color from \"@styles/color.module.scss\";\nimport space from \"@styles/space.module.scss\";\nimport layout from \"@styles/layout.module.scss\";\nimport font from \"@styles/font.module.scss\";\nimport input from \"@input/input.module.scss\";\n/** logic */\n\nimport { renderShape } from \"./logic/logic.address\";\n/**\n * Renders the text input component\n * @param {string} name - Type of input\n * @param {string} placeholder - Placeholder\n * @param {function} handleChange - handles key press event\n * @param {string} value - Current value of the input\n * @param {string} direction - direction in which the input if attached to another\n * @param {string} inputType - Whether if the input is text-based or select-based\n */\n\nexport var TextInput = function TextInput(_ref) {\n  _s();\n\n  var _ref$name = _ref.name,\n      name = _ref$name === void 0 ? \"text\" : _ref$name,\n      handleChange = _ref.handleChange,\n      value = _ref.value,\n      direction = _ref.direction,\n      placeholder = _ref.placeholder;\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\".concat([shape[\"h--50\"], input[\"outside\"], layout[\"relative\"], space[\"p-v--6\"], space[\"p-h--12\"], layout[\"items-center\"]].join(\" \"), \" \").concat(renderShape(direction), \" \").concat(active ? [color[\"b-2--black\"]].join(\" \") : [color[\"b--white__3\"]].join(\" \")),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        autoFocus: true,\n        id: name,\n        name: name,\n        type: \"text\",\n        onChange: handleChange,\n        onFocus: function onFocus() {\n          return setActive(true);\n        },\n        onBlur: function onBlur() {\n          return setActive(false);\n        },\n        value: value,\n        className: \"\".concat([space[\"p--0\"], shape[\"w--full\"], layout[\"block\"], color[\"b--0\"], font[\"size--14\"], font[\"weight--100\"], color[\"c__placeholder--black\"]].join(\" \"), \" \"),\n        style: {\n          outline: \"none\"\n        },\n        placeholder: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TextInput, \"1cfVChV6gA1Fk8+xDnwTj3gmgZo=\");\n\n_c = TextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/components/atoms/input/input.text.tsx"],"names":["useState","shape","color","space","layout","font","input","renderShape","TextInput","name","handleChange","value","direction","placeholder","active","setActive","join","position","height","width","display","alignItems","outline"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA;;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,SAOX,GAAG,SAPQA,SAOR,OAAoE;AAAA;;AAAA,uBAAjEC,IAAiE;AAAA,MAAjEA,IAAiE,0BAA1D,MAA0D;AAAA,MAAlDC,YAAkD,QAAlDA,YAAkD;AAAA,MAApCC,KAAoC,QAApCA,KAAoC;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBAC3Cb,QAAQ,CAAC,KAAD,CADmC;AAAA,MAChEc,MADgE;AAAA,MACxDC,SADwD;;AAEvE,sBACE;AACE,IAAA,SAAS,YAAK,CACZd,KAAK,CAAC,OAAD,CADO,EAEZK,KAAK,CAAC,SAAD,CAFO,EAGZF,MAAM,CAAC,UAAD,CAHM,EAIZD,KAAK,CAAC,QAAD,CAJO,EAKZA,KAAK,CAAC,SAAD,CALO,EAMZC,MAAM,CAAC,cAAD,CANM,EAOZY,IAPY,CAOP,GAPO,CAAL,cAOMT,WAAW,CAACK,SAAD,CAPjB,cAQPE,MAAM,GACF,CAACZ,KAAK,CAAC,YAAD,CAAN,EAAsBc,IAAtB,CAA2B,GAA3B,CADE,GAEF,CAACd,KAAK,CAAC,aAAD,CAAN,EAAuBc,IAAvB,CAA4B,GAA5B,CAVG,CADX;AAAA,2BAcE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,UADL;AAELC,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,KAAK,EAAE,MAHF;AAILC,QAAAA,OAAO,EAAE,MAJJ;AAKLC,QAAAA,UAAU,EAAE;AALP,OADT;AAAA,6BASE;AACE,QAAA,SAAS,EAAE,IADb;AAEE,QAAA,EAAE,EAAEZ,IAFN;AAGE,QAAA,IAAI,EAAEA,IAHR;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,QAAQ,EAAEC,YALZ;AAME,QAAA,OAAO,EAAE;AAAA,iBAAMK,SAAS,CAAC,IAAD,CAAf;AAAA,SANX;AAOE,QAAA,MAAM,EAAE;AAAA,iBAAMA,SAAS,CAAC,KAAD,CAAf;AAAA,SAPV;AAQE,QAAA,KAAK,EAAEJ,KART;AASE,QAAA,SAAS,YAAK,CACZR,KAAK,CAAC,MAAD,CADO,EAEZF,KAAK,CAAC,SAAD,CAFO,EAGZG,MAAM,CAAC,OAAD,CAHM,EAIZF,KAAK,CAAC,MAAD,CAJO,EAKZG,IAAI,CAAC,UAAD,CALQ,EAMZA,IAAI,CAAC,aAAD,CANQ,EAOZH,KAAK,CAAC,uBAAD,CAPO,EAQZc,IARY,CAQP,GARO,CAAL,MATX;AAkBE,QAAA,KAAK,EAAE;AAAEM,UAAAA,OAAO,EAAE;AAAX,SAlBT;AAmBE,QAAA,WAAW,EAAET;AAnBf;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA;AAdF;AAAA;AAAA;AAAA;AAAA,WADF;AAgDD,CAzDM;;GAAML,S;;KAAAA,S","sourcesContent":["import { useState } from \"react\";\n\n/** styles **/\nimport shape from \"@styles/shape.module.scss\";\nimport color from \"@styles/color.module.scss\";\nimport space from \"@styles/space.module.scss\";\nimport layout from \"@styles/layout.module.scss\";\nimport font from \"@styles/font.module.scss\";\nimport input from \"@input/input.module.scss\";\n\n/** logic */\nimport { renderShape } from \"./logic/logic.address\";\n\n/**\n * Renders the text input component\n * @param {string} name - Type of input\n * @param {string} placeholder - Placeholder\n * @param {function} handleChange - handles key press event\n * @param {string} value - Current value of the input\n * @param {string} direction - direction in which the input if attached to another\n * @param {string} inputType - Whether if the input is text-based or select-based\n */\nexport const TextInput: React.FC<{\n  name?: string;\n  inputType?: string;\n  placeholder?: string;\n  handleChange?: any;\n  value?: string;\n  direction?: string;\n}> = ({ name = \"text\", handleChange, value, direction, placeholder }) => {\n  const [active, setActive] = useState(false);\n  return (\n    <div\n      className={`${[\n        shape[\"h--50\"],\n        input[\"outside\"],\n        layout[\"relative\"],\n        space[\"p-v--6\"],\n        space[\"p-h--12\"],\n        layout[\"items-center\"],\n      ].join(\" \")} ${renderShape(direction)} ${\n        active\n          ? [color[\"b-2--black\"]].join(\" \")\n          : [color[\"b--white__3\"]].join(\" \")\n      }`}\n    >\n      <div\n        style={{\n          position: \"relative\",\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        <input\n          autoFocus={true}\n          id={name}\n          name={name}\n          type=\"text\"\n          onChange={handleChange}\n          onFocus={() => setActive(true)}\n          onBlur={() => setActive(false)}\n          value={value}\n          className={`${[\n            space[\"p--0\"],\n            shape[\"w--full\"],\n            layout[\"block\"],\n            color[\"b--0\"],\n            font[\"size--14\"],\n            font[\"weight--100\"],\n            color[\"c__placeholder--black\"],\n          ].join(\" \")} `}\n          style={{ outline: \"none\" }}\n          placeholder={placeholder}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}