{"ast":null,"code":"import { useEffect } from 'react';\n/**\n * A custom hook which allows modals to close when clicked outside of itself\n * @param ref\n * @param handler\n */\n\nexport var useOnClickOutside = function useOnClickOutside(ref, handler) {\n  useEffect(function () {\n    var listener = function listener(event) {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return function () {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\nexport default useOnClickOutside;","map":null,"metadata":{},"sourceType":"module"}