{"ast":null,"code":"import { APIClient } from \"api/client\";\n/**\n * Fetches based on the given request method and body (optional)\n * @param {string} url - Url to send the request to\n * @param {string} method - HTTP method (GET|POST|PUT|DELETE)\n * @param {Object} body - Options you want to pass to the request\n * @param {function} triggerLoading - Callback triggered when the request is being sent. (Usage: Loading Animations)\n * @param {function} onSuccess - Callback triggered when the request is successful\n * @param {function} onFail - Callback triggered when the request is not successful\n */\n\nexport const usePost = ({\n  url,\n  body,\n  triggerLoading,\n  onSuccess,\n  onFail\n}) => {\n  const doFetch = async () => {\n    try {\n      if (triggerLoading) {\n        triggerLoading(true);\n      }\n\n      const client = APIClient();\n      const {\n        data\n      } = await client.post(url, body);\n\n      if (onSuccess) {\n        onSuccess(data);\n      }\n\n      return {\n        data\n      };\n    } catch (err) {\n      setTimeout(() => {\n        if (triggerLoading) {\n          triggerLoading(false);\n        }\n\n        if (onFail) {\n          onFail();\n        }\n      }, 2000);\n    }\n  };\n\n  return doFetch;\n};","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/hooks/usePost.ts"],"names":["APIClient","usePost","url","body","triggerLoading","onSuccess","onFail","doFetch","client","data","post","err","setTimeout"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAAC;AACtBC,EAAAA,GADsB;AAEtBC,EAAAA,IAFsB;AAGtBC,EAAAA,cAHsB;AAItBC,EAAAA,SAJsB;AAKtBC,EAAAA;AALsB,CAAD,KAYjB;AACJ,QAAMC,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,UAAIH,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AACD,YAAMI,MAAM,GAAGR,SAAS,EAAxB;AACA,YAAM;AAAES,QAAAA;AAAF,UAAW,MAAMD,MAAM,CAACE,IAAP,CAAYR,GAAZ,EAAiBC,IAAjB,CAAvB;;AACA,UAAIE,SAAJ,EAAe;AACbA,QAAAA,SAAS,CAACI,IAAD,CAAT;AACD;;AACD,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD,KAVD,CAUE,OAAOE,GAAP,EAAY;AACZC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,cAAJ,EAAoB;AAClBA,UAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AACD,YAAIE,MAAJ,EAAY;AACVA,UAAAA,MAAM;AACP;AACF,OAPS,EAOP,IAPO,CAAV;AAQD;AACF,GArBD;;AAsBA,SAAOC,OAAP;AACD,CApCM","sourcesContent":["import { APIClient } from \"api/client\";\n\n/**\n * Fetches based on the given request method and body (optional)\n * @param {string} url - Url to send the request to\n * @param {string} method - HTTP method (GET|POST|PUT|DELETE)\n * @param {Object} body - Options you want to pass to the request\n * @param {function} triggerLoading - Callback triggered when the request is being sent. (Usage: Loading Animations)\n * @param {function} onSuccess - Callback triggered when the request is successful\n * @param {function} onFail - Callback triggered when the request is not successful\n */\nexport const usePost = ({\n  url,\n  body,\n  triggerLoading,\n  onSuccess,\n  onFail,\n}: {\n  url: string;\n  body: any;\n  triggerLoading?: (state: boolean) => void;\n  onSuccess: (data?: any) => void;\n  onFail?: () => void;\n}) => {\n  const doFetch = async () => {\n    try {\n      if (triggerLoading) {\n        triggerLoading(true);\n      }\n      const client = APIClient();\n      const { data } = await client.post(url, body);\n      if (onSuccess) {\n        onSuccess(data);\n      }\n      return { data };\n    } catch (err) {\n      setTimeout(() => {\n        if (triggerLoading) {\n          triggerLoading(false);\n        }\n        if (onFail) {\n          onFail();\n        }\n      }, 2000);\n    }\n  };\n  return doFetch;\n};\n"]},"metadata":{},"sourceType":"module"}