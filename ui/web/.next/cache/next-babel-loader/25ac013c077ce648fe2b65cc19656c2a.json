{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ken/Desktop/airbnb/ui/web/context/auth.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useReducer, useContext } from \"react\";\nconst AuthStateContext = /*#__PURE__*/createContext(undefined);\nconst AuthDispatchContext = /*#__PURE__*/createContext(undefined);\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case \"auth_login\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"auth\",\n        title: \"Log in\"\n      });\n\n    case \"auth_signup\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"auth\",\n        title: \"Sign in\"\n      });\n\n    case \"login\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"login\",\n        title: \"Log in\"\n      });\n\n    case \"signup\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"signup\",\n        title: \"Finish signing up\"\n      });\n\n    case \"forgot_password\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"forgot_password\",\n        title: \"Forgot password\"\n      });\n\n    case \"exists\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        display: \"exists\",\n        title: \"Account exists\"\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst AuthProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(authReducer, {\n    display: \"auth\",\n    title: \"Log in\"\n  });\n  return /*#__PURE__*/_jsxDEV(AuthStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(AuthDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\nconst useAuthState = () => {\n  const context = useContext(AuthStateContext);\n\n  if (!context) {\n    throw new Error(\"useAuthState must be used within a ToggleProvider\");\n  }\n\n  return context;\n};\n\nconst useAuthDispatch = () => {\n  const context = useContext(AuthDispatchContext);\n\n  if (!context) {\n    throw new Error(\"useAuthDispatch must be used within a ToggleProvider\");\n  }\n\n  return context;\n};\n\nexport { useAuthDispatch, useAuthState, AuthProvider };","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/context/auth.tsx"],"names":["createContext","useReducer","useContext","AuthStateContext","undefined","AuthDispatchContext","authReducer","state","action","type","display","title","AuthProvider","children","dispatch","useAuthState","context","Error","useAuthDispatch"],"mappings":";;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;AAYA,MAAMC,gBAAgB,gBAAGH,aAAa,CAAoBI,SAApB,CAAtC;AACA,MAAMC,mBAAmB,gBAAGL,aAAa,CAAuBI,SAAvB,CAAzC;;AAEA,MAAME,WAAW,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,6CAAYF,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,MAA5B;AAAoCC,QAAAA,KAAK,EAAE;AAA3C;;AACF,SAAK,aAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,MAA5B;AAAoCC,QAAAA,KAAK,EAAE;AAA3C;;AACF,SAAK,OAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,OAA5B;AAAqCC,QAAAA,KAAK,EAAE;AAA5C;;AACF,SAAK,QAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,QAA5B;AAAsCC,QAAAA,KAAK,EAAE;AAA7C;;AACF,SAAK,iBAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,iBAA5B;AAA+CC,QAAAA,KAAK,EAAE;AAAtD;;AACF,SAAK,QAAL;AACE,6CAAYJ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE,QAA5B;AAAsCC,QAAAA,KAAK,EAAE;AAA7C;;AACF;AACE,aAAOJ,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AACxD,QAAM;AAAA,OAACN,KAAD;AAAA,OAAQO;AAAR,MAAoBb,UAAU,CAACK,WAAD,EAAc;AAChDI,IAAAA,OAAO,EAAE,MADuC;AAEhDC,IAAAA,KAAK,EAAE;AAFyC,GAAd,CAApC;AAKA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEJ,KAAlC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAEO,QAArC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAbD;;AAeA,MAAME,YAAY,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAGd,UAAU,CAACC,gBAAD,CAA1B;;AACA,MAAI,CAACa,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAND;;AAQA,MAAME,eAAe,GAAG,MAAM;AAC5B,QAAMF,OAAO,GAAGd,UAAU,CAACG,mBAAD,CAA1B;;AACA,MAAI,CAACW,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAND;;AAQA,SAASE,eAAT,EAA0BH,YAA1B,EAAwCH,YAAxC","sourcesContent":["import { createContext, useReducer, useContext } from \"react\";\n\ntype Dispatch = (action: Action) => void;\ntype Action = { type: string };\n\ntype State = {\n  display: string;\n  title: string;\n};\n\ntype AuthProviderProps = { children: React.ReactNode };\n\nconst AuthStateContext = createContext<State | undefined>(undefined);\nconst AuthDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nconst authReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"auth_login\":\n      return { ...state, display: \"auth\", title: \"Log in\" };\n    case \"auth_signup\":\n      return { ...state, display: \"auth\", title: \"Sign in\" };\n    case \"login\":\n      return { ...state, display: \"login\", title: \"Log in\" };\n    case \"signup\":\n      return { ...state, display: \"signup\", title: \"Finish signing up\" };\n    case \"forgot_password\":\n      return { ...state, display: \"forgot_password\", title: \"Forgot password\" };\n    case \"exists\":\n      return { ...state, display: \"exists\", title: \"Account exists\" };\n    default:\n      return state;\n  }\n};\n\nconst AuthProvider = ({ children }: AuthProviderProps) => {\n  const [state, dispatch] = useReducer(authReducer, {\n    display: \"auth\",\n    title: \"Log in\",\n  });\n\n  return (\n    <AuthStateContext.Provider value={state}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n\nconst useAuthState = () => {\n  const context = useContext(AuthStateContext);\n  if (!context) {\n    throw new Error(\"useAuthState must be used within a ToggleProvider\");\n  }\n  return context;\n};\n\nconst useAuthDispatch = () => {\n  const context = useContext(AuthDispatchContext);\n  if (!context) {\n    throw new Error(\"useAuthDispatch must be used within a ToggleProvider\");\n  }\n  return context;\n};\n\nexport { useAuthDispatch, useAuthState, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}