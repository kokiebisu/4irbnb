{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport var useSlider = function useSlider(items, width, type) {\n  var displayingLength = {\n    banner: items.length,\n    also: items.length / 2\n  };\n  var displayingWidth = {\n    banner: width,\n    also: width / (width > 728 ? 3 : 2)\n  };\n\n  var _useState = useState({\n    activeSlide: 0,\n    translate: 0,\n    transition: 0.45\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var previousSlide = function previousSlide() {\n    if (state.activeSlide === 0) {\n      return setState(_objectSpread(_objectSpread({}, state), {}, {\n        translate: (displayingLength[type] - 1) * displayingWidth[type],\n        activeSlide: displayingLength[type] - 1\n      }));\n    }\n\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      activeSlide: state.activeSlide - 1,\n      translate: (state.activeSlide - 1) * displayingWidth[type]\n    }));\n  };\n\n  var nextSlide = function nextSlide() {\n    if (state.activeSlide === displayingLength[type] - 1) {\n      return setState(_objectSpread(_objectSpread({}, state), {}, {\n        translate: 0,\n        activeSlide: 0\n      }));\n    }\n\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      activeSlide: state.activeSlide + 1,\n      translate: (state.activeSlide + 1) * displayingWidth[type]\n    }));\n  };\n\n  return {\n    state: state,\n    previousSlide: previousSlide,\n    nextSlide: nextSlide\n  };\n};","map":null,"metadata":{},"sourceType":"module"}