{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ken/Desktop/airbnb/ui/web/components/atoms/input/input.select.tsx\";\nimport { useState } from \"react\";\n/** styles **/\n\nimport shape from \"@styles/shape.module.scss\";\nimport color from \"@styles/color.module.scss\";\nimport space from \"@styles/space.module.scss\";\nimport layout from \"@styles/layout.module.scss\";\nimport font from \"@styles/font.module.scss\";\nimport input from \"@input/input.module.scss\";\nimport { styleContainer } from \"./styling.select\";\n/** vectors */\n\nimport { ChevronDown, ChevronTop } from \"@svg/regular\";\n/** Options */\n\nimport { inputTypes } from \"./logic/logic.types\";\nimport { renderShape } from \"./logic/logic.select\";\n/**\n * Renders the text input component\n * @param {string} name - Type of input\n * @param {string} placeholder - Placeholder\n * @param handleChange\n * @param {string} value - Current value of the input\n * @param {string} direction - direction in which the input if attached to another\n * @param {string} inputType - Whether if the input is text-based or select-based\n */\n\nexport const SelectInput = ({\n  handleChange,\n  value,\n  direction,\n  errors = false,\n  disabled = false,\n  inputType = \"Bed and breakfast\"\n}) => {\n  const {\n    0: fieldActive,\n    1: setFieldActive\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${[shape[\"h--50\"], layout[\"flex\"], input[\"outside\"], layout[\"relative\"], layout[\"items-center\"]].join(\" \")} `,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${renderShape(direction)} ${styleContainer(errors, fieldActive, value)}`,\n      style: {\n        borderColor: disabled ? \"#EBEBEB\" : \"#B0B0B0\",\n        padding: \"0 12px\",\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        backgroundColor: disabled ? \"#F7F7F7\" : \"white\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        style: {\n          height: \"100%\",\n          outline: \"none\"\n        },\n        id: inputType,\n        disabled: disabled,\n        onChange: handleChange,\n        value: value,\n        onFocus: () => setFieldActive(true),\n        onBlur: () => setFieldActive(false),\n        className: `${[color[\"bg--transparent\"], layout[\"justify-between\"], shape[\"br--4\"], space[\"p--0\"], shape[\"w--full\"], layout[\"block\"], color[\"b--0\"], font[\"size--14\"], font[\"weight--300\"]].join(\" \")}`,\n        children: [inputTypes[inputType].default && /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: inputTypes[inputType].default,\n          children: inputTypes[inputType].default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), inputTypes[inputType].options]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: [layout[\"flex\"], layout[\"items-center\"]].join(\" \"),\n        children: fieldActive ? /*#__PURE__*/_jsxDEV(ChevronTop, {\n          width: 13\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ChevronDown, {\n          width: 13,\n          fill: disabled ? \"#DDDDDD\" : \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/ken/Desktop/airbnb/ui/web/components/atoms/input/input.select.tsx"],"names":["useState","shape","color","space","layout","font","input","styleContainer","ChevronDown","ChevronTop","inputTypes","renderShape","SelectInput","handleChange","value","direction","errors","disabled","inputType","fieldActive","setFieldActive","join","borderColor","padding","position","height","width","display","justifyContent","backgroundColor","outline","default","options"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\n/** styles **/\nimport shape from \"@styles/shape.module.scss\";\nimport color from \"@styles/color.module.scss\";\nimport space from \"@styles/space.module.scss\";\nimport layout from \"@styles/layout.module.scss\";\nimport font from \"@styles/font.module.scss\";\nimport input from \"@input/input.module.scss\";\nimport { styleContainer } from \"./styling.select\";\n\n/** vectors */\nimport { ChevronDown, ChevronTop } from \"@svg/regular\";\n\n/** Options */\nimport { inputTypes } from \"./logic/logic.types\";\nimport { renderShape } from \"./logic/logic.select\";\n\n/**\n * Renders the text input component\n * @param {string} name - Type of input\n * @param {string} placeholder - Placeholder\n * @param handleChange\n * @param {string} value - Current value of the input\n * @param {string} direction - direction in which the input if attached to another\n * @param {string} inputType - Whether if the input is text-based or select-based\n */\nexport const SelectInput: React.FC<{\n  handleChange?: () => void;\n  value?: string;\n  direction?: string;\n  errors?: boolean;\n  disabled?: boolean;\n  inputType?: string;\n}> = ({\n  handleChange,\n  value,\n  direction,\n  errors = false,\n  disabled = false,\n  inputType = \"Bed and breakfast\",\n}): JSX.Element => {\n  const [fieldActive, setFieldActive] = useState(false);\n  return (\n    <div\n      className={`${[\n        shape[\"h--50\"],\n        layout[\"flex\"],\n        input[\"outside\"],\n        layout[\"relative\"],\n        layout[\"items-center\"],\n      ].join(\" \")} `}\n    >\n      <div\n        className={`${renderShape(direction)} ${styleContainer(\n          errors,\n          fieldActive,\n          value\n        )}`}\n        style={{\n          borderColor: disabled ? \"#EBEBEB\" : \"#B0B0B0\",\n          padding: \"0 12px\",\n          position: \"relative\",\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          backgroundColor: disabled ? \"#F7F7F7\" : \"white\",\n        }}\n      >\n        <select\n          style={{ height: \"100%\", outline: \"none\" }}\n          id={inputType}\n          disabled={disabled}\n          onChange={handleChange}\n          value={value}\n          onFocus={() => setFieldActive(true)}\n          onBlur={() => setFieldActive(false)}\n          className={`${[\n            color[\"bg--transparent\"],\n            layout[\"justify-between\"],\n            shape[\"br--4\"],\n            space[\"p--0\"],\n            shape[\"w--full\"],\n            layout[\"block\"],\n            color[\"b--0\"],\n            font[\"size--14\"],\n            font[\"weight--300\"],\n          ].join(\" \")}`}\n        >\n          {inputTypes[inputType].default && (\n            <option disabled value={inputTypes[inputType].default}>\n              {inputTypes[inputType].default}\n            </option>\n          )}\n          {inputTypes[inputType].options}\n        </select>\n        <div className={[layout[\"flex\"], layout[\"items-center\"]].join(\" \")}>\n          {fieldActive ? (\n            <ChevronTop width={13} />\n          ) : (\n            <ChevronDown width={13} fill={disabled ? \"#DDDDDD\" : \"black\"} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}