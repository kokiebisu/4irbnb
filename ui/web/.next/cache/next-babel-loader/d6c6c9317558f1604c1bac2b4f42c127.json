{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { APIClient } from \"api/client\";\n/**\n * Fetches based on the given request method and body (optional)\n * @param {string} url - Url to send the request to\n * @param {string} method - HTTP method (GET|POST|PUT|DELETE)\n * @param {Object} body - Options you want to pass to the request\n * @param {function} triggerLoading - Callback triggered when the request is being sent. (Usage: Loading Animations)\n * @param {function} onSuccess - Callback triggered when the request is successful\n * @param {function} onFail - Callback triggered when the request is not successful\n */\n\nexport var usePost = function usePost(_ref) {\n  var url = _ref.url,\n      body = _ref.body,\n      triggerLoading = _ref.triggerLoading,\n      onSuccess = _ref.onSuccess,\n      onFail = _ref.onFail;\n\n  var doFetch = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var client, _yield$client$post, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (triggerLoading) {\n                triggerLoading(true);\n              }\n\n              client = APIClient();\n              _context.next = 5;\n              return client.post(url, body);\n\n            case 5:\n              _yield$client$post = _context.sent;\n              _data = _yield$client$post.data;\n\n              if (onSuccess) {\n                onSuccess(_data);\n              }\n\n              return _context.abrupt(\"return\", {\n                data: _data\n              });\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              setTimeout(function () {\n                if (triggerLoading) {\n                  triggerLoading(false);\n                }\n\n                if (onFail) {\n                  onFail();\n                }\n              }, 2000);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function doFetch() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return doFetch;\n};","map":null,"metadata":{},"sourceType":"module"}